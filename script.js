var Canvas = document.getElementById("myCanvas");
var Context = Canvas.getContext("2d");
var Song = "Shinsekai"
var Menu = "End"

// Music
var Music = new Audio(`./Sounds/${Song}.mp3`)
Music.playbackRate = 1
Music.volume = .5

// Gameplay & Settings
var Keybinds = ["Z", "X", "2", "3"]
var HoldTicks = 10

var Score = 0
var Combo = 0

var RawScore = 0
var ExpectedRawScore = 0

var ScoreAnim = 0
var ComboAnim = 50
var AccuracyAnim = 100
var JudgeAnim = 150

// Judgements
var CurrentJudgement = ""
var CurJudgementColor = "#000000"
var Judgements = {
    Miss: [0, 0, 0, 0, "Miss", "#ff0000"],
    Far: [0, 25, 125, 1, "Far", "#ff3300"],
    Off: [0, 50, 95, 5, "Off", "#ff6200"],
    Fine: [0, 100, 70, 10, "Fine", "#00ff00"],
    Exact: [0, 150, 50, 20, "Exact", "#005eff"],
    RExact: [0, 250, 35, 20, "Precise", "#ffff00"],
}

// Charting
var Time = 0
var Time2 = 0
var TimeGap = 0

var NotesPassed = -35
var Maps = {
    "Shinsekai": [
        [1257,1],
        [1257,4],
        [1257,3],
        [1412,4],
        [1412,2],
        [1567,3],
        [1567,1],
        [1723,2],
        [2189,4],
        [2189,1],
        [2500,3],
        [2500,2],
        [2915,4],
        [2915,3],
        [2915,2],
        [2915,1],
        [3744,4],
        [3744,2],
        [3744,1],
        [4262,1],
        [4262,3],
        [4417,4],
        [4417,2],
        [4573,3],
        [4573,1],
        [4780,2],
        [4987,4],
        [4987,3],
        [4987,1],
        [5402,4],
        [5402,2],
        [5402,1],
        [5972,3],
        [5972,2],
        [6231,4],
        [6231,3],
        [6231,2],
        [6231,1],
        [7163,2],
        [7163,4],
        [7319,3],
        [7474,1],
        [7474,2],
        [7474,4],
        [9029,4],
        [9029,3],
        [9029,1],
        [9443,1],
        [9443,4],
        [9443,3],
        [9443,2],
        [9961,3],
        [9961,1],
        [9961,4],
        [10065,2],
        [10168,1],
        [10272,3],
        [10272,4],
        [10376,2],
        [10479,1],
        [10583,2],
        [10583,4],
        [10687,3],
        [10790,4],
        [10894,1],
        [10946,2],
        [10997,3],
        [11049,4],
        [11205,4],
        [11205,3],
        [11205,1],
        [11308,2],
        [11412,3],
        [11516,4],
        [11619,3],
        [11723,2],
        [11826,1],
        [11930,2],
        [12034,3],
        [12137,1],
        [12189,2],
        [12241,3],
        [12293,4],
        [12448,2],
        [12448,1],
        [12604,4],
        [12604,3],
        [12707,1],
        [12811,4],
        [12811,2],
        [12915,3],
        [13018,1],
        [13018,4],
        [13122,2],
        [13277,1],
        [13277,3],
        [13433,4],
        [13484,3],
        [13536,2],
        [13588,1],
        [13692,4],
        [13692,2],
        [13795,3],
        [13899,2],
        [14003,4],
        [14003,1],
        [14106,2],
        [14210,3],
        [14313,1],
        [14313,4],
        [14417,3],
        [14521,2],
        [14624,4],
        [14624,1],
        [14728,2],
        [14832,3],
        [14935,2],
        [14935,4],
        [14935,1],
        [15039,3],
        [15143,4],
        [15143,2],
        [15246,3],
        [15350,4],
        [15350,1],
        [15453,2],
        [15557,3],
        [15557,1],
        [15661,4],
        [15764,3],
        [15868,2],
        [15972,1],
        [16075,2],
        [16179,1],
        [16179,4],
        [16179,3],
        [16282,2],
        [16386,3],
        [16386,1],
        [16490,2],
        [16593,1],
        [16593,4],
        [16697,3],
        [16801,2],
        [16904,1],
        [17008,2],
        [17111,3],
        [17215,4],
        [17215,1],
        [17319,3],
        [17422,2],
        [17422,4],
        [17422,1],
        [17526,3],
        [17630,2],
        [17733,1],
        [17733,4],
        [17837,3],
        [17940,2],
        [18044,4],
        [18044,1],
        [18148,3],
        [18251,2],
        [18355,3],
        [18355,1],
        [18459,2],
        [18562,3],
        [18666,4],
        [18666,1],
        [18769,3],
        [18873,2],
        [18977,1],
        [19080,2],
        [19184,3],
        [19288,4],
        [19288,1],
        [19391,3],
        [19495,2],
        [19598,3],
        [19598,1],
        [19702,2],
        [19806,3],
        [19909,2],
        [19909,4],
        [19909,1],
        [20013,3],
        [20117,2],
        [20220,4],
        [20220,1],
        [20324,2],
        [20427,3],
        [20531,4],
        [20531,1],
        [20635,2],
        [20738,3],
        [20842,4],
        [20842,1],
        [20946,3],
        [21049,1],
        [21153,2],
        [21153,4],
        [21257,3],
        [21360,2],
        [21464,1],
        [21516,4],
        [21619,3],
        [21723,2],
        [21826,1],
        [21878,4],
        [21982,3],
        [22137,1],
        [22137,4],
        [22396,4],
        [22448,3],
        [22500,2],
        [22552,1],
        [22604,4],
        [22707,3],
        [22811,2],
        [22915,1],
        [22966,4],
        [23070,3],
        [23174,2],
        [23277,4],
        [23277,1],
        [23381,2],
        [23484,3],
        [23640,4],
        [23640,1],
        [23744,3],
        [23847,2],
        [23951,3],
        [24054,2],
        [24158,4],
        [24158,1],
        [24262,3],
        [24365,2],
        [24469,1],
        [24573,2],
        [24676,3],
        [24780,2],
        [24883,4],
        [24883,3],
        [24883,1],
        [25194,1],
        [25298,2],
        [25453,1],
        [25453,3],
        [25453,4],
        [25868,2],
        [25972,3],
        [26127,2],
        [26127,4],
        [26127,1],
        [26386,4],
        [26490,3],
        [26593,2],
        [26697,3],
        [26801,2],
        [26904,3],
        [27008,4],
        [27111,3],
        [27215,2],
        [27370,4],
        [27370,3],
        [27370,1],
        [27474,2],
        [27578,3],
        [27681,1],
        [27681,4],
        [27785,3],
        [27889,2],
        [27992,3],
        [28096,2],
        [28200,1],
        [28303,2],
        [28407,3],
        [28510,2],
        [28614,4],
        [28614,3],
        [28614,1],
        [28718,2],
        [28821,3],
        [28925,1],
        [28925,4],
        [29029,3],
        [29132,2],
        [29236,4],
        [29236,1],
        [29339,2],
        [29443,3],
        [29547,1],
        [29547,4],
        [29650,3],
        [29754,2],
        [29858,4],
        [29858,3],
        [29858,1],
        [29961,2],
        [30065,3],
        [30168,1],
        [30168,4],
        [30272,3],
        [30376,2],
        [30479,1],
        [30583,4],
        [30687,3],
        [30790,2],
        [30894,1],
        [30997,2],
        [31101,3],
        [31101,4],
        [31101,1],
        [31205,2],
        [31308,1],
        [31412,2],
        [31516,3],
        [31619,1],
        [31619,4],
        [31723,3],
        [31826,2],
        [31930,1],
        [32034,4],
        [32137,3],
        [32241,2],
        [32345,4],
        [32345,3],
        [32345,1],
        [32448,2],
        [32552,3],
        [32655,2],
        [32759,3],
        [32863,1],
        [32863,4],
        [32966,3],
        [33070,2],
        [33174,1],
        [33277,2],
        [33381,3],
        [33484,4],
        [33588,1],
        [33692,2],
        [33795,3],
        [33899,4],
        [34003,3],
        [34106,2],
        [34210,4],
        [34210,1],
        [34313,2],
        [34417,3],
        [34521,1],
        [34521,4],
        [34624,3],
        [34728,2],
        [34832,3],
        [34832,4],
        [34832,1],
        [34935,2],
        [35039,3],
        [35143,4],
        [35246,1],
        [35350,2],
        [35453,3],
        [35557,1],
        [35557,4],
        [35661,3],
        [35764,2],
        [35868,4],
        [35868,1],
        [36075,4],
        [36075,3],
        [36075,2],
        [36231,1],
        [36334,2],
        [36438,3],
        [36541,1],
        [36541,4],
        [36645,3],
        [36749,2],
        [36852,1],
        [36904,4],
        [37008,3],
        [37111,2],
        [37215,1],
        [37319,4],
        [37319,3],
        [37474,2],
        [37578,3],
        [37681,4],
        [37785,3],
        [37889,1],
        [37992,2],
        [38096,3],
        [38200,1],
        [38200,4],
        [38303,3],
        [38407,2],
        [38562,4],
        [38562,3],
        [38562,1],
        [38718,2],
        [38821,3],
        [38925,2],
        [39029,3],
        [39132,2],
        [39236,4],
        [39236,1],
        [39339,2],
        [39443,3],
        [39547,1],
        [39547,4],
        [39650,3],
        [39806,2],
        [39806,4],
        [39806,1],
        [39961,3],
        [40065,2],
        [40168,1],
        [40324,4],
        [40376,3],
        [40427,2],
        [40479,1],
        [40583,4],
        [40687,3],
        [40790,2],
        [40894,1],
        [41049,4],
        [41049,2],
        [41205,1],
        [41308,2],
        [41412,3],
        [41567,1],
        [41619,2],
        [41671,3],
        [41723,4],
        [41826,2],
        [41930,3],
        [42034,2],
        [42137,1],
        [42293,4],
        [42293,3],
        [42293,2],
        [42500,4],
        [42604,3],
        [42707,2],
        [42863,4],
        [42863,3],
        [42863,1],
        [43174,1],
        [43277,2],
        [43381,3],
        [43536,2],
        [43536,4],
        [43536,1],
        [43847,3],
        [43951,2],
        [44054,1],
        [44210,4],
        [44210,3],
        [44210,2],
        [44469,1],
        [44573,2],
        [44676,3],
        [44780,4],
        [44780,2],
        [44780,1],
        [45091,4],
        [45091,2],
        [45091,1],
        [45350,4],
        [45350,2],
        [45350,1],
        [45661,4],
        [45661,2],
        [45661,1],
        [46023,4],
        [46023,3],
        [46179,2],
        [46179,1],
        [46334,3],
        [46334,2],
        [46490,3],
        [46490,2],
        [46697,4],
        [46749,3],
        [46801,2],
        [46852,1],
        [46956,4],
        [47008,3],
        [47060,2],
        [47111,1],
        [47267,2],
        [47370,3],
        [47474,1],
        [47474,4],
        [47578,3],
        [47681,2],
        [47785,3],
        [47785,1],
        [47889,2],
        [47992,3],
        [48096,1],
        [48096,4],
        [48200,3],
        [48303,2],
        [48407,3],
        [48510,2],
        [48510,4],
        [48614,3],
        [48718,2],
        [48821,3],
        [48821,1],
        [48925,2],
        [49029,3],
        [49132,4],
        [49132,2],
        [49236,3],
        [49339,2],
        [49443,3],
        [49443,1],
        [49547,2],
        [49650,3],
        [49754,4],
        [49754,2],
        [49858,3],
        [49961,2],
        [50065,3],
        [50065,1],
        [50168,2],
        [50272,3],
        [50376,4],
        [50376,2],
        [50531,1],
        [50583,2],
        [50635,3],
        [50687,4],
        [50842,2],
        [50997,4],
        [50997,3],
        [50997,1],
        [51153,4],
        [51205,3],
        [51256,2],
        [51308,1],
        [51412,4],
        [51516,3],
        [51619,2],
        [51723,4],
        [51723,1],
        [51826,2],
        [51930,3],
        [52034,1],
        [52034,4],
        [52137,3],
        [52241,4],
        [52241,2],
        [52241,1],
        [52345,3],
        [52448,2],
        [52552,1],
        [52552,3],
        [52655,2],
        [52759,3],
        [52863,4],
        [52863,2],
        [52966,3],
        [53070,2],
        [53174,1],
        [53174,3],
        [53277,2],
        [53381,3],
        [53484,4],
        [53484,1],
        [53588,3],
        [53692,2],
        [53795,4],
        [53795,1],
        [53899,2],
        [54003,3],
        [54106,2],
        [54210,3],
        [54313,1],
        [54313,4],
        [54417,3],
        [54521,2],
        [54624,1],
        [54728,4],
        [54728,3],
        [54728,2],
        [54883,3],
        [54987,2],
        [55091,4],
        [55194,3],
        [55298,2],
        [55402,4],
        [55402,1],
        [55505,2],
        [55609,3],
        [55712,4],
        [55764,1],
        [55868,2],
        [55972,4],
        [55972,3],
        [56127,2],
        [56231,1],
        [56334,2],
        [56438,3],
        [56541,2],
        [56645,3],
        [56749,2],
        [56852,1],
        [56956,4],
        [57008,3],
        [57060,2],
        [57111,1],
        [57215,3],
        [57215,2],
        [57370,3],
        [57474,2],
        [57578,3],
        [57681,2],
        [57785,3],
        [57889,1],
        [57992,4],
        [58096,1],
        [58200,4],
        [58303,1],
        [58459,3],
        [58459,2],
        [58614,3],
        [58718,2],
        [58821,3],
        [58925,2],
        [59029,4],
        [59132,1],
        [59236,4],
        [59339,2],
        [59443,4],
        [59495,3],
        [59547,2],
        [59598,1],
        [59702,2],
        [59702,3],
        [59806,4],
        [59858,3],
        [59909,2],
        [59961,1],
        [60065,3],
        [60168,2],
        [60272,3],
        [60376,2],
        [60479,3],
        [60583,4],
        [60687,3],
        [60790,2],
        [60946,4],
        [60946,3],
        [60946,1],
        [61049,2],
        [61153,3],
        [61256,4],
        [61360,3],
        [61464,2],
        [61567,3],
        [61671,2],
        [61775,1],
        [61878,2],
        [61982,3],
        [62086,2],
        [62189,3],
        [62189,4],
        [62345,1],
        [62396,2],
        [62448,3],
        [62500,4],
        [62604,2],
        [62707,3],
        [62811,2],
        [62915,1],
        [63018,2],
        [63122,3],
        [63225,4],
        [63329,3],
        [63433,4],
        [63433,1],
        [63536,2],
        [63640,3],
        [63744,4],
        [63847,3],
        [63951,2],
        [64054,1],
        [64158,2],
        [64262,3],
        [64365,4],
        [64469,3],
        [64573,2],
        [64676,4],
        [64676,1],
        [64780,3],
        [64883,2],
        [64987,3],
        [65091,2],
        [65194,3],
        [65298,1],
        [65402,4],
        [65505,1],
        [65609,4],
        [65712,3],
        [65816,2],
        [65920,4],
        [65920,1],
        [66075,2],
        [66179,3],
        [66282,4],
        [66386,3],
        [66490,2],
        [66593,3],
        [66697,2],
        [66801,1],
        [66904,2],
        [67008,3],
        [67163,4],
        [67163,1],
        [67267,2],
        [67370,3],
        [67474,1],
        [67474,4],
        [67474,2],
        [67578,3],
        [67681,2],
        [67785,3],
        [67785,1],
        [67785,4],
        [67889,2],
        [67992,3],
        [68096,2],
        [68096,4],
        [68096,1],
        [68200,3],
        [68303,2],
        [68407,1],
        [68407,3],
        [68407,4],
        [68510,2],
        [68614,3],
        [68718,4],
        [68718,2],
        [68718,1],
        [68821,3],
        [68925,2],
        [69029,3],
        [69029,4],
        [69029,1],
        [69132,2],
        [69236,3],
        [69339,4],
        [69339,1],
        [69339,2],
        [69443,3],
        [69547,2],
        [69650,1],
        [69650,4],
        [69650,3],
        [69754,3],
        [69858,2],
        [69961,4],
        [69961,3],
        [69961,1],
        [70065,2],
        [70168,3],
        [70272,1],
        [70272,4],
        [70272,2],
        [70376,3],
        [70479,2],
        [70583,4],
        [70583,3],
        [70583,1],
        [70687,2],
        [70790,3],
        [70894,4],
        [70894,2],
        [70894,1],
        [70997,3],
        [71101,2],
        [71205,3],
        [71205,1],
        [71205,4],
        [71308,2],
        [71412,3],
        [71516,4],
        [71516,1],
        [71619,2],
        [71723,3],
        [71826,3],
        [71826,4],
        [71826,1],
        [71930,2],
        [72034,3],
        [72137,1],
        [72137,2,518],
        [72137,4],
        [72655,3,726],
        [72655,4],
        [72655,1],
        [73381,4,622],
        [73381,2],
        [73381,1],
        [74003,3,621],
        [74003,1],
        [74003,2],
        [74624,4],
        [74624,2],
        [74624,1],
        [74883,3],
        [74883,4],
        [74883,2],
        [75143,2],
        [75143,3],
        [75143,1],
        [75505,3],
        [75505,4],
        [75505,2],
        [75868,4],
        [75868,3],
        [75868,2],
        [75868,1],
        [76179,1],
        [76282,2],
        [76386,3],
        [76490,4],
        [76593,3],
        [76697,2],
        [76801,3],
        [76904,2],
        [77008,3],
        [77111,4],
        [77111,1],
        [77319,3],
        [77422,2],
        [77526,4],
        [77526,1],
        [77526,3],
        [77630,2],
        [77733,4],
        [77733,3],
        [77837,2],
        [77940,3],
        [78044,4],
        [78044,1],
        [78044,2],
        [78148,3],
        [78251,2],
        [78355,1],
        [78355,4],
        [78355,3],
        [78459,2],
        [78562,3],
        [78666,1],
        [78666,4],
        [78666,2],
        [78769,3],
        [78873,1],
        [78873,4],
        [78873,2],
        [78977,3],
        [79080,2],
        [79184,4],
        [79184,1],
        [79184,3],
        [79288,2],
        [79391,3],
        [79495,2],
        [79598,4],
        [79598,3],
        [79598,1],
        [79754,2],
        [79858,1],
        [79961,2],
        [80065,3],
        [80168,1],
        [80220,2],
        [80272,3],
        [80324,4],
        [80427,2],
        [80531,4],
        [80583,3],
        [80635,2],
        [80687,1],
        [80842,4],
        [80842,2],
        [80946,3],
        [81049,2],
        [81153,3],
        [81153,1],
        [81257,2],
        [81360,3],
        [81464,4],
        [81464,2],
        [81567,3],
        [81671,4],
        [81775,1],
        [81826,2],
        [81878,3],
        [81930,4],
        [82086,3],
        [82086,1],
        [82241,2],
        [82345,3],
        [82448,4],
        [82448,1],
        [82552,3],
        [82655,2],
        [82759,3],
        [82759,1],
        [82863,2],
        [83018,1],
        [83070,2],
        [83122,3],
        [83174,4],
        [83329,2],
        [83433,4],
        [83484,3],
        [83536,2],
        [83588,1],
        [83692,2],
        [83795,3],
        [83899,2],
        [84003,3],
        [84106,4],
        [84210,3],
        [84313,2],
        [84417,1],
        [84573,3],
        [84573,2],
        [84728,4],
        [84832,3],
        [84935,4],
        [84935,2],
        [85039,3],
        [85143,2],
        [85246,3],
        [85246,1],
        [85350,2],
        [85453,3],
        [85557,4],
        [85557,2],
        [85712,3],
        [85816,4],
        [85816,1],
        [85972,2],
        [86075,3],
        [86127,1],
        [86231,2],
        [86334,1],
        [86334,3],
        [86438,2],
        [86490,4],
        [86593,3],
        [86697,2],
        [86801,1],
        [86852,4],
        [86904,3],
        [86956,2],
        [87008,1],
        [87163,3],
        [87267,2],
        [87370,3],
        [87370,1],
        [87474,2],
        [87578,3],
        [87681,4],
        [87681,2],
        [87785,3],
        [87889,2],
        [87992,4],
        [87992,1],
        [88096,3],
        [88200,2],
        [88303,4],
        [88303,1],
        [88459,2],
        [88562,3],
        [88666,2],
        [88666,4],
        [88769,3],
        [88873,2],
        [88977,3],
        [88977,1],
        [89080,2],
        [89184,3],
        [89288,4],
        [89288,2],
        [89391,3],
        [89495,2],
        [89547,4,4145],
        [89547,1,4145]    
    ]
}
var Chart = Maps[Song]

// Functions
function createText(text, align, color, x, y, size) {
    Context.font = `${size}px "Lucida Sans Unicode"`
    Context.textBaseline = 'center';
    Context.fillStyle = color;
    Context.textAlign = align
    Context.fillText(text, x, y)
}

function drawShape(x, y, sizex, sizey, shape, color, color2) {
    function drawTriangle(x, y, sizex, sizey, color, color2) {
        Context.beginPath();
        Context.moveTo(x, y)
        Context.lineTo(x + sizex, y) 
        Context.lineTo(x, y + sizey)
        Context.closePath();
    
        var grd = Context.createLinearGradient(0, 0, 0, 150);
        grd.addColorStop(0, color);
        grd.addColorStop(1, color2);
    
        Context.fillStyle = grd;
        Context.fill();
    }

    function drawRectangle(x, y, sizex, sizey, color, color2) {
        var grd = Context.createLinearGradient(0, 0, 0, 150);
        grd.addColorStop(0, color);
        grd.addColorStop(1, color2);

        Context.fillStyle = grd;
        Context.fillRect(x, y, sizex, sizey);
    }

    function drawCircle(x, y, size, color, color2) {
        Context.beginPath();
        Context.arc(x, y, size, 0, 2 * Math.PI);
 
        var grd = Context.createLinearGradient(0, 0, 0, 150);
        grd.addColorStop(0, color);
        grd.addColorStop(1, color2);

        Context.fillStyle = grd;
        Context.fill();
    }

    var Color = color
    var Color2 = color2 || color

    if (shape == "Triangle") { 
        drawTriangle(x, y, sizex, sizey, Color, Color2)
    } else if (shape == "Rectangle") {
        drawRectangle(x, y, sizex, sizey, Color, Color2)
    } else if (shape == "Circle") {
        drawCircle(x, y, sizex, Color, Color2)
    }
}

function spawnJudgement(Name, Stats) {
    CurrentJudgement = Judgements[Name][4]
    CurJudgementColor = Judgements[Name][5]   
    JudgeAnim = 145    

    if (Stats == true || Stats == undefined) {
        Score += Judgements[Name][1] * (1 + (Combo / 22.75)) * Music.playbackRate

        Judgements[Name][0] += 1
        if (Judgements[Name][4] == "Miss") {
            Combo = 0
            ComboAnim = 25
        } else {    
            Combo += 1
            ComboAnim = 75
    
            var HitAudio = new Audio("./Sounds/hit.wav")
            HitAudio.play()
        }
    }
}

Music.onended = function(evt) {
   Menu = "End" 
}

var DownKeys = []
document.onkeydown = function(evt) {
    event = evt || window.event;
    var Key = (event.key).toUpperCase()
    
    if (Key == "P") {
        Music.play()
    }

    if (DownKeys[Key] == false || DownKeys[Key] == undefined) {
        DownKeys[Key] = true

        var ANotesPassed = Math.max(0, NotesPassed)
        var TargTime = 1e300
        var Target = null
        var JudI = "None"
    
        for (let notei = ANotesPassed; notei < ANotesPassed + 75; notei++) {
            if (notei < Chart.length) {
                var Note = Chart[notei]
                if (Keybinds.indexOf(Key) + 1 == Note[1]) {
                    if (Math.abs(Time - Note[0]) < TargTime) {
                        Target = notei
                        TargTime = Math.abs(Time - Note[0])
                    }
                }
            }
        }
    
        if (Target != null && TargTime < 150) {    
            for (let jud in Judgements) {
                if (TargTime < Judgements[jud][2]) {
                    JudI = jud
                }
            }
    
            if (JudI != null) {
                if (Chart[Target][2] == undefined) {
                    Chart[Target][0] = undefined
                    Chart[Target][1] = undefined

                    NotesPassed += 1
                } else {
                    Chart[Target][3] = "I exist!"
                }

                spawnJudgement(JudI)
            }
        }
    }
};

document.onkeyup = function(evt) {
    event = evt || window.event;
    var Key = (event.key).toUpperCase()

    DownKeys[Key] = false

    var ANotesPassed = Math.max(0, NotesPassed)
    var TargTime = 1e300
    var Target = null

    for (let notei = ANotesPassed; notei < ANotesPassed + 75; notei++) {
        if (notei < Chart.length) {
            var Note = Chart[notei]
            if (Keybinds.indexOf(Key) + 1 == Note[1]) {
                Target = notei
                TargTime = Math.abs(Time - Note[0])
            }
        }
    }

    if (Target != null && TargTime < 150) {
        if (Chart[Target][3] != undefined) {
            Chart[Target][3] = undefined
            spawnJudgement("Miss")

            Note[0] = undefined
            Note[1] = undefined
            Note[2] = undefined
            Note[3] = undefined

            NotesPassed += 1
        }
    }
}

setInterval(function() {
    drawShape(0, 0, Canvas.width, Canvas.height, "Rectangle", "#000000")
    console.log(Menu)

    if (Menu == "Song") {
        var ANotesPassed = Math.max(0, NotesPassed)

        Canvas.width = window.innerWidth
        Canvas.height = window.innerHeight
    
        drawShape(Canvas.width, 0, -300, 125, "Triangle", "#888888", "#333333")
        drawShape(Canvas.width / 2 - 325, 0, 650, Canvas.height, "Rectangle", "#222222")
    
        for (var i = 1; i < 5; i++) {
            drawShape(Canvas.width / 2 + (i * 140 - 350), Canvas.height - 150, 60, 0, "Circle", "#ffffff")
        }
    
        for (let notei = ANotesPassed; notei < ANotesPassed + 150; notei++) {
            if (notei < Chart.length) {
                // Run functions
                var Note = Chart[notei]
                if (Note[2] != undefined) {
                    if (Note[3] != undefined) {
                        var Distance = Math.abs(Time - Note[0])
                        Note[2] -= Distance
                        Note[0] = Time
                        Score += (Combo + 1) * Music.playbackRate
    
                        HoldTicks -= Music.playbackRate
                        if (HoldTicks <= 0) {
                            spawnJudgement("RExact", false)
                            Combo += 1
                            ComboAnim = 65
    
                            HoldTicks += 10
                        }
    
                        if (Note[2] < 0) {
                            spawnJudgement("RExact")
                            Note[0] = undefined
                            Note[1] = undefined
                            Note[2] = undefined
                            Note[3] = undefined
    
                            NotesPassed += 1
                        }
                    }
                }
                drawShape(Canvas.width / 2 + (Note[1] * 140 - 350), ((Time - Note[0]) * 1.75) + (Canvas.height - 150), 60, 0, "Circle", "#888888")
    
                // Draw Shapes
                if (Note[2] != undefined) {
                    drawShape(Canvas.width / 2 + (Note[1] * 140 - 350), ((Time - Note[0]) * 1.75) - (Note[2] * 1.75) + (Canvas.height - 150), 60, 0, "Circle", "#888888")
                    drawShape(Canvas.width / 2 + (Note[1] * 140 - 410),((Time - Note[0]) * 1.75) - (Note[2] * 1.75) + (Canvas.height - 150) , 120, (Note[2] * 1.75), "Rectangle", "#888888")
                }
    
                // Miss function
                if (Note[0] - Time < -175) {
                    spawnJudgement("Miss")
    
                    Note[0] = undefined
                    Note[1] = undefined
                    Note[2] = undefined
                    Note[3] = undefined
    
                    NotesPassed += 1
                }
            }
        }
    
        var Accuracy = 0
    
        RawScore = 0
        ExpectedRawScore  = 0
        for (let jud in Judgements) {
            var Judge = Judgements[jud]
    
            RawScore += Judge[0] * Judge[3]
            ExpectedRawScore += Judge[0] * 20
        }
    
        Accuracy = (RawScore / ExpectedRawScore) * 100 || 100
    
        ScoreAnim += (Score - ScoreAnim) / 5
        AccuracyAnim += (Accuracy - AccuracyAnim) / 5
        JudgeAnim += (175 - JudgeAnim) / 10
        ComboAnim += (50 - ComboAnim) / 10
    
        drawShape(Canvas.width / 2 - 225, 0, 450, 100, "Rectangle", "#111111")
        createText(ScoreAnim.toLocaleString(undefined, {maximumFractionDigits: 0}), "right", "#ffffff", Canvas.width - 25, 55, 50)
        createText(AccuracyAnim.toLocaleString(undefined, {maximumFractionDigits: 3}) + "%", "right", "#ffffff", Canvas.width - 25, 85, 30)
        createText("(" + RawScore.toLocaleString() + " / " + ExpectedRawScore.toLocaleString() + ")", "right", "#ffffff", Canvas.width - 25, 115, 30)
    
        createText(CurrentJudgement, "center", CurJudgementColor, Canvas.width / 2, JudgeAnim, 50)
        createText("x" + Combo.toLocaleString(undefined, {maximumFractionDigits: 0}), "center", "#ffffff", Canvas.width / 2, 65 + (ComboAnim - 50) / 4, ComboAnim)
        Time = Music.currentTime * 1000
        TimeGap = Time - Time2
        Time2 = Time
    } else if (Menu == "End") {
        createText("Score: " + Score.toLocaleString(undefined, {maximumFractionDigits: 0}), "left", "#ffffff", 10, 35, 50)
    }
}, 16)
